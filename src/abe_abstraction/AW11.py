from rabe_py import aw11
from .ABEscheme import ABEscheme


class AW11(ABEscheme):
    """
    Python wrapper for the Aw11 schceme implemented in (rabe::schemes::aw11)
    """

    def test(self):
        gk = self.gk
        plaintext = "our plaintext!"
        pk, sk = self.__keygen("1")
        ciphertext = aw11.encrypt(gk, pk, self.policy, plaintext)
        print(type(ciphertext))
        plaintext_after = aw11.decrypt(gk, sk, ciphertext)

        print("".join(chr(i) for i in plaintext_after))

    def encrypt(self, plaintext: str, user_id: str, *args, **kwargs):
        """
        This function encrypts plaintext data using a given JSON string policy and a list of attributes
        and produces a ciphertext if successfull
        Arguments:
        * plaintext - The plaintext data given as a string
        Returns:
        * cipheretext - The ciphertext generated by aw11.encrypt()
        """
        pk, sk = self.__keygen(user_id)
        ciphertext = aw11.encrypt(self.gk, pk, self.policy, plaintext)
        return ciphertext

    def decrypt(self, ciphertext: str, user_id: str, *args, **kwargs):
        """
        This function decrypts the ciphertext if the attributes in msk match the policy of ct.
        Arguments:
        * ciphertext - The ciphertext generated by aw11.encrypt()
        Returns:
        * plaintext - The decrypted ciphertext as a list of u8's, generated by aw11.decrypt()
        """

        pk, sk = self.__keygen(user_id)

        ciphertext = aw11.PyAw11Ciphertext(str(ciphertext))

        print("aaa")
        plaintext = aw11.decrypt(self.gk, sk, ciphertext)
        print("ooo")
        return plaintext

    def generate_static_keys(self):
        """
        This function generates a static key, the global key (gk).
        """
        self.gk = aw11.setup()
        return self.gk

    def load_static_keys_from_sql(self, sql_handle):
        """
        This function loads new static keys from a SQL database.
        Arguments:
        * sql_handle - A SQL database handle

        Returns:
        * True if the keys were loaded successfully, False otherwise
        """
        gk = super().load_gk(sql_handle, "AW11")

        self.gk = aw11.PyAw11GlobalKey(gk)
        return True

    def __keygen(self, user_name: str):
        """
        This function generates all non-static keys, public key(pk), master secret key(msk) and a secret key(sk).
        Arguments:
        * user_name       - The name of the user the key is associated with, must be unique
        * user_attributes - A list of string attributes assigned to this user
        """

        (pk, msk) = aw11.authgen(self.gk, self.attributes)
        sk = aw11.keygen(self.gk, msk, user_name, self.attributes)

        return (pk, sk)
